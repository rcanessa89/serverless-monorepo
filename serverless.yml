service: severless-monorepo

useDotenv: true

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-offline

custom:
  sstApp: ${self:provider.stage}-serverless-monorepo-infrastructure
  bundle:
    tsConfig: ./lambda-tsconfig/tsconfig.json
    linting: false # Lint will be handle it by Nx
    externals: all
    # These dependencies most be include it in case to use MySql and/or GraphQL
    forceInclude:
      - mysql
    #   - apollo-server-express

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:*
    - Effect: Allow
      Action:
        - ec2:CreateNetworkInterface
      Resource: arn:aws:ec2:${self:provider.region}:*:*

environment:
  STAGE: ${self:provider.stage}
  REGION: ${self:provider.region}
  SERVICE: ${self:service}

functions:
  todos:
    handler: ./apps/be-todos/src/lambda.handler
    events:
      - http:
          path: /
          method: get
          cors: true
      - http:
          path: graphql
          method: post
          cors: true
      - http:
          path: graphql
          method: get
          cors: true
